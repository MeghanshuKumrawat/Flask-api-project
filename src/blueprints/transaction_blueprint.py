from flask import Blueprint, jsonify, request
from ..db.models import Book, Transaction, User
from mongoengine.queryset.visitor import Q
from datetime import date
import json

# define the blueprint
transaction_blueprint = Blueprint(name="transaction_blueprint", import_name=__name__)

# Calculate days between two dates
def calculate_days(issued_date, return_date):
    try:
        issued_date = list(map(int, str(issued_date).split('-')))
        return_date = list(map(int, str(return_date).split('-')))
        delta = date(return_date[2], return_date[1], return_date[0]) - date(issued_date[0], issued_date[1], issued_date[2])
    except Exception as e:
        print("function : calculate_days exception -", e)
    return delta.days

# book name + person name + issue date (BOOK IS ISSUED)
@transaction_blueprint.route('/issue-book', methods=['GET'])
def issue_book():
    try:
        user = User.objects.get(name__contains=request.args.get('username'))
        book = Book.objects.get(name__contains=request.args.get('book'))
        date = request.args.get('date')
        data = Transaction(user=user, book=book, issued_date=date)
        data.save()
    except Exception as e:
        data = {"message":"request failed!",
                "request":"GET",
                "parameters help":"book name + person name + issue date (BOOK IS ISSUED)",
                "parameters required":"?book='data smart'&username='example'&date=12-12-2012",
                "exception":e}
    return jsonify(data)

# book name + person name + return date (BOOK IS RETURNED)
@transaction_blueprint.route('/return-book', methods=['GET'])
def return_book():
    try:
        user = User.objects.get(name__contains=request.args.get('username'))
        book = Book.objects.get(name__contains=request.args.get('book'))
        date = request.args.get('date')
        data = Transaction.objects.get(user=user, book=book)
        data.return_date = date
        data.total_rent = calculate_days(data.issued_date, data.return_date) * book.rent
        data.save()
    except Exception as e:
        data = {"message":"request failed!",
                "request":"GET",
                "parameters help":"book name + person name + return date (BOOK IS RETURNED)",
                "parameters required":"?book=data smart&username=example&date=12-12-2012",
                "exception":e}
    return jsonify(data)

# List of people who have issued that book ( total count) + list of people who currently have that book issued ( currently issued only).
@transaction_blueprint.route('/get-users-by-book', methods=['GET'])
def get_users_by_book_name():
    try:
        book = Book.objects.get(name__contains=request.args.get('book'))
        transactions = Transaction.objects(book=book).to_json()
        json_data = json.loads(transactions)
        users = []
        for i in range(len(json_data)):
            if not json_data[i].get('return_date'):
                user = User.objects.get(id=json_data[i].get('user').get('$oid'))
                users.append(user)
    except Exception as e:
        data = {"message":"request failed!",
                "request":"GET",
                "parameters help":"Book name",
                "parameters required":"?book=data smart",
                "exception":e}
    return jsonify({"count":len(json_data), "data":users})

# Total rent generated by that book
@transaction_blueprint.route('/get-total-rent-by-book', methods=['GET'])
def get_total_rent_by_book_name():
    try:
        book = Book.objects.get(name__contains=request.args.get('book'))
        transactions = Transaction.objects(book=book).to_json()
        json_data = json.loads(transactions)
    
        sum = 0
        for i in range(len(json_data)):
            sum += json_data[i].get('total_rent')
        data = {"book_name":book.name, "total_rent":sum}
    except Exception as e:
        data = {"message":"request failed!",
                "request":"GET",
                "parameters help":"Book name",
                "parameters required":"?book=data smart",
                "exception":e}
    return jsonify(data)

# List of books issued to that person
@transaction_blueprint.route('/get-books-by-user', methods=['GET'])
def get_books_by_user_name():
    try:
        user = User.objects.get(name__contains=request.args.get('username'))
        transactions = Transaction.objects(user=user).to_json()
        json_data = json.loads(transactions)
        books = []
        for i in range(len(json_data)):
            book = Book.objects.get(id=json_data[i].get('book').get('$oid'))
            books.append(book)
        data = {"count":len(json_data), "data":books}
    except Exception as e:
        data = {"message":"request failed!",
                "request":"GET",
                "parameters help":"Personâ€™s name",
                "parameters required":"?username=example",
                "exception":e}
    return jsonify(data)

# list of books issued in that date range and the person they are issued to
@transaction_blueprint.route('/date-range-transaction', methods=['GET'])
def date_range_transaction():
    try:
        start = request.args.get('start')
        end = request.args.get('end')
        transactions = Transaction.objects((Q(issued_date__gte=start) & Q(issued_date__lte=end))).to_json()
        json_data = json.loads(transactions)
        data = []
        for i in range(len(json_data)):
            user = User.objects.get(id=json_data[i].get('user').get('$oid'))
            book = Book.objects.get(id=json_data[i].get('book').get('$oid'))
            data.append({"book":book, "user":user})
    except Exception as e:
        data = {"message":"request failed!",
                "request":"GET",
                "parameters help":"Date range",
                "parameters required":"?start=1-12-2000&end=10-12-2000",
                "exception":e}
    return jsonify({"count":len(json_data), "data":data})


